---
# -----------------------------------
#  Copyright IBM Corp. 2020. All rights reserved.
#  US Government Users Restricted Rights - Use, duplication or disclosure
#  restricted by GSA ADP Schedule Contract with IBM Corp.
# -----------------------------------

- include_tasks: "../../common/tasks/get_files_dir.yml"
  when: gen_files_dir is undefined or gen_files_dir == ""


- name: Retrieve VPN GW info from file
  vars:
    vpn_file: "{{gen_files_dir}}/vpn.yml"
  set_fact:
    vpn_cn: "{{ lookup('file', vpn_file) | from_yaml }}"

- debug:
    msg: "{{vpn_cn}}"

- include_tasks: "../../common/tasks/target_region.yml"
  vars:
    target_region: "{{vpn_cn.region}}"

######################################################
#  IKE Policy

#  new_ike_exist:     contains id if a new ike is requested and it already exists
#  vpn_cn.ike_pol_id: contains a predefined ike id to use (no new ike will be created)
#  ike_pol_output:    contains (simulated) output of newly created ike

- name: "Check for IKE policy"
  command:
    argv:
      - ibmcloud
      - is
      - ikes
      - --json
  register: ike_list_output

# IF no input policy, then new_ike_exist will have a new-created ike (in case this role ran before)
- vars:
    ike_name: "{{vpn_cn.conn_name}}-ike"
    query: "[?name==`{{ike_name}}`].id"
  set_fact:
    new_ike_exist: "{{ike_list_output.stdout|from_json | json_query(query) | first | default('')}}"
  when: vpn_cn.ike_pol_id is undefined or vpn_cn.ike_pol_id == ""


- name: "Check if the requested IKE policy exists"
  vars:
    query: "[?id==`{{vpn_cn.ike_pol_id}}`].id"
  set_fact:
    ike_fail: "{{ike_list_output.stdout|from_json | json_query(query) | first | default('')}}"
  when: vpn_cn.ike_pol_id is defined and vpn_cn.ike_pol_id != ""
  failed_when: ike_fail is defined and ike_fail == ""  # fail when specified ID is not found

# Create new, if no policy requested AND if new_ike_exist didn't find the new one
- name: "Create IKE Policy"
  command:
    argv:
      - ibmcloud
      - is
      - ikec
      - "{{vpn_cn.conn_name}}-ike"
      - "{{vpn_cn.security.auth}}"
      - "{{vpn_cn.security.DH_Group}}"
      - "{{vpn_cn.security.encr}}"
      - "{{vpn_cn.security.ike.version}}"
      - --key-lifetime
      - "{{vpn_cn.security.ike.key_lifetime}}"
      - --json
  register: ike_pol_output
  when: (new_ike_exist is defined and new_ike_exist == "" ) and ( vpn_cn.ike_pol_id is undefined or vpn_cn.ike_pol_id == "" )

- name: "Simulate stdout for existing new ike_policy ID (empty if none requested)"
  vars:
    tvar:
      id: "{{new_ike_exist|default('')}}"
  set_fact:
    ike_pol_output:
      stdout: "{{tvar|to_json}}"
  when: ike_pol_output.skipped is defined and ike_pol_output.skipped == true




######################################################
#  IPSEC Policy
- name: "Check for IPSEC policy"
  command:
    argv:
      - ibmcloud
      - is
      - ipsecs
      - --json
  register: ipsec_list_output

- vars:
    ipsec_name: "{{vpn_cn.conn_name}}-ipsec"
    query: "[?name==`{{ipsec_name}}`].id"
  set_fact:
    new_ipsec_exist: "{{ipsec_list_output.stdout|from_json | json_query(query) | first | default('')}}"
  when: vpn_cn.ipsec_pol_id is undefined or vpn_cn.ipsec_pol_id == ""

- name: "Check if the requested IPSEC policy exists"
  vars:
    query: "[?id==`{{vpn_cn.ipsec_pol_id}}`].id"
  set_fact:
    ipsec_fail: "{{ipsec_list_output.stdout|from_json | json_query(query) | first | default('')}}"
  when: vpn_cn.ipsec_pol_id is defined and vpn_cn.ipsec_pol_id != ""
  failed_when: ipsec_fail is defined and ipsec_fail == ""  # fail when specified ID is not found


- name: "Create IPSEC Policy"
  vars:
    PFS_String: "{% if not vpn_cn.security.ip_sec.PFS %}disabled{% else %}{{vpn_cn.security.ip_sec.PFS}}{% endif %}"
  command:
    argv:
      - ibmcloud
      - is
      - ipsecc
      - "{{vpn_cn.conn_name}}-ipsec"
      - "{{vpn_cn.security.auth}}"
      - "{{vpn_cn.security.encr}}"
      - "{{vpn_cn.security.ip_sec.PFS}}"
      - --key-lifetime
      - "{{vpn_cn.security.ip_sec.key_lifetime}}"
      - --json
  register: ipsec_pol_output
  when: ( new_ipsec_exist is defined and new_ipsec_exist == "" ) and ( vpn_cn.ipsec_pol_id is undefined or vpn_cn.ipsec_pol_id == "" )

- name: "Simulate stdout for existing new ipsec_policy ID (empty if none requsted)"
  vars:
    tvar:
      id: "{{new_ipsec_exist|default('')}}"
  set_fact:
    ipsec_pol_output:
      stdout: "{{tvar|to_json}}"
  when: ipsec_pol_output.skipped is defined and ipsec_pol_output.skipped == true


######################################################
#  VPN Connection

- name: "Check if VPN Connection already exists"
  command:
    argv:
      - ibmcloud
      - is
      - vpn-cns
      - "{{vpn_cn.vpn_gateway}}"
      - --json
  register: vpn_list_output

# need to extract id and local_cidrs from existing vpn-connection output since both are needed
# for the vpn.yml file block
- vars:
    vpn_name: "{{vpn_cn.conn_name}}"
    query: "[?name==`{{vpn_name}}`].{id: id, local_cidrs: local_cidrs}"
  set_fact:
    vpn_exist: "{{vpn_list_output.stdout|from_json | json_query(query) | first | default('')}}"

# policies are either the requested (..pol_id) OR the id in the (simulated) stdout
- name: Create VPN Connection using cloud CLI
  vars:
    peer_cidr_list: "[ {% for b in vpn_cn.peer_cidrs %} --peer-cidr, {{b}}, {% endfor %} ]"
    default_ike: "{{ike_pol_output.stdout|from_json}}"
    default_ips: "{{ipsec_pol_output.stdout|from_json}}"
    ike_pol: "{{vpn_cn.ike_pol_id | default( default_ike.id )}}"
    ips_pol: "{{vpn_cn.ipsec_pol_id | default( default_ips.id )}}"
    arglist:
      - ibmcloud
      - is
      - vpn-cnc
      - "{{vpn_cn.conn_name}}"
      - "{{vpn_cn.vpn_gateway}}"
      - "{{vpn_cn.peer_address}}"
      - "{{vpn_cn.preshared_key}}"
      - --local-cidr
      - "{{vpn_cn.local_cidr}}"
      - "{{peer_cidr_list | from_yaml }}"
      - --dead-peer-detection-action
      - "{{vpn_cn.action}}"
      - --dead-peer-detection-interval
      - "{{vpn_cn.interval}}"
      - --dead-peer-detection-timeout
      - "{{vpn_cn.timeout}}"
      - --ike-policy
      - "{{ike_pol}}"
      - --ipsec-policy
      - "{{ips_pol}}"
      - --json
  # debug:
  #   msg: "{{ arglist | flatten }}"
  command:
    argv: "{{arglist | flatten}}"
  register: vpn_cn_output
  when: vpn_exist == ""

- name: "Check VPN Connection id"
  vars:
    tvar:
      id: "{{vpn_exist.id}}"
      local_cidrs: "{{vpn_exist.local_cidrs}}"
  set_fact:
    vpn_cn_output:
      stdout: "{{tvar|to_json}}"
  when: vpn_cn_output.skipped is defined and vpn_cn_output.skipped == true



######################################################
# Store results and IDs in vpn file
- name: Save VPN-Connection data to file
  vars:
    vpc_dir: "{{ gen_files_dir }}"
    vpn_conn: "{{vpn_cn_output.stdout|from_json}}"
    ike_pol: "{{ike_pol_output.stdout|from_json}}"
    ips_pol: "{{ipsec_pol_output.stdout|from_json}}"
  blockinfile:
    path: "{{vpc_dir}}/vpn.yml"
    marker: "# {mark} ANSIBLE MAINTAINED BLOCK FOR VPN CONNECTION"
    block: |
      id: {{vpn_conn.id}}
      local_cidrs: {{vpn_conn.local_cidrs|to_yaml}}
      new_ike_id: {{ike_pol.id|default('')}}
      new_ips_id: {{ips_pol.id|default('')}}



# from IBM Cloud documentation example:
# curl -H "Authorization: $iam_token" -X POST "$api_endpoint/v1/vpn_gateways/$gwid1/connections?version=$api_version&generation=2" \
#         -d '{
#                 "name": "vpn-connection-to-vpn-gateway-2",
#                 "peer_address": $gwaddress2,
#                 "psk": "VPNDemoPassword",
#                 "local_cidrs": [ "<LOCAL-CIDR>" ],
#                 "peer_cidrs": [ "<PEER-CIDR>" ]
#             }'
